---
title: "P4: Trip Distribution"
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor: visual
---

The purpose of this assignment is for you to learn how to apply and calibrate a gravity model to a destination choice problem. You will use data from the United States Census Bureau's Longitudinal Employer-Household Dynamics (LEHD) data program.

This example uses concepts that are described in more detail on pages 182 - 184 (balancing) and 192 - 193 (calibration) of *Modelling Transport, 4th edition*, by Juan de Dios Ortuzar and Luis G. Willumsen.

## Load libraries

This analysis uses the following packages:

```{r libraries, message=FALSE, warning=FALSE}
options(java.parameters = '-Xmx12G')

library(tidyverse)
library(here)
library(knitr)
library(tigris)
library(stringr)
library(maptiles)
library(tidyterra)
library(r5r)
library(sf)
library(leaflet)

here("code",
     "grvty_balancing.R") |>
  source()
```

## Select a study area

```{r count-cbsas, message=FALSE}

all_cbsas <- core_based_statistical_areas(progress_bar = FALSE,
                                          year = 2024) |>
  select(NAMELSAD) |>
  mutate(type = ifelse(!is.na(str_match(NAMELSAD, "Metro")), "Metro", "Micro")) |>
  mutate(type = as.character(type))

table(all_cbsas$type) |>
  kable()
```

-   Napa County (FIPS = 06055)

```{r napa-boundary}
napa <- all_cbsas |>
  filter(NAMELSAD == "Napa, CA Metro Area") |>
  st_transform("WGS84")

base_map <- get_tiles(napa,
                      provider = "CartoDB.Positron",
                      zoom = 9,
                      crop = TRUE)

ggplot(napa) +
  geom_spatraster_rgb(data = base_map) +
  geom_sf(fill = NA,
          color = "pink") +
  theme_void()
```

## Load Job Data

```{r read-jobs, message=FALSE}
state <- "ca"
year <- "2021"

napa_counties_5_digit <- c("06055")
napa_counties_3_digit <- substr(napa_counties_5_digit, 4, 5)

url <- paste0("https://lehd.ces.census.gov/data/lodes/LODES8/",
              state,
              "/od/",
              state,
              "_od_main_JT00_",
              year,
              ".csv.gz")

pa_data <- read_csv(url) |>
  mutate(w_county = substr(w_geocode, 1, 5),
         h_county = substr(h_geocode, 1, 5)) |>
  filter(h_county %in% napa_counties_5_digit &
           w_county %in% napa_counties_5_digit) |>
  mutate(w_geocode = as.character(w_geocode),
         h_geocode = as.character(h_geocode))
  
```

Let's take a look at this dataset.

```{r view-jobs}

head(pa_data) |>
  kable()
```

## Aggregate data to zone totals

```{r aggreg-jobs, message=FALSE}
total_prod <- pa_data |>
  group_by(h_geocode) |>
  summarise(income1_p = sum(SE01),
            income3_p = sum(SE03)) |>
  rename(geocode = h_geocode)

total_attr <- pa_data |>
  group_by(w_geocode) |>
  summarize(income1_a = sum(SE01),
            income3_a = sum(SE03))|>
  rename(geocode = w_geocode)

trip_gen <- full_join(total_prod,
                      total_attr) |>
  replace_na(list(income1_p = 0, 
                  income1_a = 0,
                  income3_p = 0,
                  income3_a = 0))

head(trip_gen) |>
  kable()
```

## Load spatial data

The idea behind the gravity model is that trips are more attracted to places with more attractions, and less attracted to places that are further away (in terms of travel time). So we need to associate all these jobs with their locations.

First, let's download the census block boundaries within these four counties.

```{r load-blocks, message=FALSE}

msa_blocks <- blocks(state = "CA",
                     county = napa_counties_3_digit,
                     progress_bar = FALSE)

ggplot(msa_blocks) +
  geom_spatraster_rgb(data = base_map) +
  geom_sf(fill = NA,
          color = "pink") +
  theme_void()
  
```

```{r view-job-blocks, message=FALSE}
trip_gen_locs <- msa_blocks |>
  rename(geocode = GEOID20) |>
  right_join(trip_gen) |>
  select(geocode, 
         income1_p, 
         income3_p,
         income1_a, 
         income3_a) |>
  st_transform("WGS84")

leaflet(trip_gen_locs) |>
  addProviderTiles(provider = "CartoDB.Positron") |>
  addPolygons(weight = 2,
              color = "pink",
              fillColor = "pink",
              fillOpacity = 0.1,
              highlightOptions = highlightOptions(weight = 3,
                                                  fillOpacity = 0.5),
              label = trip_gen_locs$geocode)
```

```{r}
total_prod <- pa_data |>
  group_by(h_geocode) |>
  summarise(income1_p = sum(SE01),
            income3_p = sum(SE03)) |>
  rename(geocode = h_geocode)

total_attr <- pa_data |>
  group_by(w_geocode) |>
  summarize(income1_a = sum(SE01),
            income3_a = sum(SE03))|>
  rename(geocode = w_geocode)

trip_gen <- full_join(total_prod,
                      total_attr) |>
  replace_na(list(income1_p = 0, 
                  income1_a = 0,
                  income3_p = 0,
                  income3_a = 0))

head(trip_gen) |>
  kable()

leaflet(trip_gen_locs) |>
  addProviderTiles(provider = "CartoDB.Positron") |>
  addPolygons(weight = 2,
              color = "pink",
              fillColor = "pink",
              fillOpacity = 0.1,
              highlightOptions = highlightOptions(weight = 3,
                                                  fillOpacity = 0.5),
              label = trip_gen_locs$geocode)
```

## Load the network

```{r, eval=FALSE}

napa_core <- here("P4",
     "napa-network") |>
  setup_r5()

street_vis <- street_network_to_sf(napa_core)

street_lines <- street_vis$edges
street_pts <- street_vis$vertices

st_write(street_lines,
         here("P4",
              "data",
              "street-lines.shp"))

st_write(street_pts,
         here("P4",
              "data",
              "street-pts.shp"))

stop_r5()
```

```{r load-sf-roads, message=FALSE, results='hide'}
street_lines <- here("P4",
                     "data",
                     "street-lines.shp") |>
  st_read()

street_pts <- here("P4",
                     "data",
                     "street-pts.shp") |>
  st_read()


```

```{r plot-streets, eval=FALSE}

base_map <- get_tiles(street_lines,
                      provider = "CartoDB.Positron",
                      zoom = 8,
                      crop = TRUE)

ggplot() +
  geom_spatraster_rgb(data = base_map) +
  geom_sf(data = trip_gen_locs,
          color = "pink3",
          fill = "pink") +
  geom_sf(data = street_lines,
          color =  "lightgreen") +
  theme_void()
```

## Skim the network

```{r get-centroids, message=FALSE, warning=FALSE}

trip_gen_loc_ids <- trip_gen_locs |>
  st_point_on_surface() |>
  st_nearest_feature(street_pts)
```

```{r snap-centroids}

trip_gen_pts <- street_pts[trip_gen_loc_ids,] |>
  mutate(id = trip_gen_locs$geocode) |>
  select(id)
```

```{r, eval=FALSE}

napa_core <- here("P4",
     "napa-network") |>
  setup_r5()

skim <- travel_time_matrix(napa_core,
                           origins = trip_gen_pts,
                           destinations = trip_gen_pts,
                           mode = "CAR",
                           max_trip_duration = 600)

stop_r5()

```

```{r, eval=FALSE}
write_csv(skim, file = here("P4",
                            "data",
                            "napa-skim_3.csv"))
```

```{r read-skim}
skim <- read_csv(here("P4",
                      "data",
                      "napa-skim_3.csv"),
                 col_types = "ccn")
```

```{r view-skim}

head(skim) |>   
  kable()
```

```{r count-skim}

nrow(skim)
```

## Apply a gravity model

```{r draw-friction}
friction <- tibble(`Travel time (min)` = seq(0, 30, by=1)) |>
  mutate(`β = -0.001` = exp(0.001 * `Travel time (min)`),
         `β = 0.050` = exp(-0.050 * `Travel time (min)`),
         `β = 0.200` = exp(-0.200 * `Travel time (min)`),
         `β = 0.500` = exp(-0.500 * `Travel time (min)`),
         `β = 1.000` = exp(-1.000 * `Travel time (min)`)) |>
  pivot_longer(cols = -`Travel time (min)`,
               names_to = "betas") |>
  rename(`Destination attractiveness` = value)

ggplot(friction) +
  geom_line(aes(x = `Travel time (min)`,
                y = `Destination attractiveness`,
                linetype = betas)) +
  scale_x_continuous(breaks = seq(0, 30, by=5)) +
  scale_y_continuous(breaks = seq(0, 1.1, by=0.1)) +
  theme_minimal()
```

### Select a decay function parameter

```{r calc-avg-tt, message=FALSE}
flow_tt <- pa_data |>
  rename(from_id = h_geocode,
         to_id = w_geocode,
         flow_income1 = SE01,
         flow_income3 = SE03) |>
  right_join(skim, by = join_by(to_id, from_id)) |>
  replace_na(list(flow_income1 = 0,
                  flow_income3 = 0))

avg_tts <- tibble(`Worker sector` = c("income1", "income3"),
                  `Average travel time (observed)` = c(
                    sum(flow_tt$flow_income1 * flow_tt$travel_time_p50) / 
                      sum(flow_tt$flow_income1),
                    sum(flow_tt$flow_income3 * flow_tt$travel_time_p50) / 
                      sum(flow_tt$flow_income3)))
                  
kable(avg_tts, digits = 1)
```

```{r calc-betas}

betas <- 1/avg_tts$`Average travel time (observed)`
names(betas) <- c("income1", "income3")

initial_betas <- tibble(`Worker sector` = names(betas),
                  `Initial β value` = betas)
                  
kable(initial_betas, digits = 3)
```

```{r draw-betas}
# Create the friction data
friction <- tibble(`Travel time (min)` = seq(0, 30, by=1)) |>
  mutate(income1 = exp(-1 * betas["income1"] * `Travel time (min)`),
         income3 = exp(-1 * betas["income3"] * `Travel time (min)`)) |>
  pivot_longer(cols = -`Travel time (min)`,
               names_to = "Industry") |>
  rename(`Destination attractiveness` = value)

# Create the plot and assign it to a variable with custom legend titles
friction_plot <- ggplot(friction) +
  geom_line(aes(x = `Travel time (min)`,
                y = `Destination attractiveness`,
                linetype = Industry)) +
  scale_x_continuous(breaks = seq(0, 30, by=5)) +
  scale_y_continuous(breaks = seq(0, 1.1, by=0.1)) +
  scale_linetype_manual(values = c("solid", "dashed"),
                        labels = c("Income Group 1 (SE01)", "Income Group 3 (SE03)")) +
  theme_minimal() +
  labs(linetype = "Income Group") # Optional: customize the legend title

# Save the plot to a PNG file
ggsave("friction_plot.png", plot = friction_plot, width = 8, height = 6, dpi = 300)

```

### Calculate friction factors

```{r calc-friction}

flow_tt <- flow_tt |>
  mutate(friction_income1 = exp(-1 * betas["income1"] * travel_time_p50),
         friction_income3 = exp(-1 * betas["income3"] * travel_time_p50))
```

### Estimate initial trip matrix

```{r initial-matrix, eval=FALSE}

flow_income1_est <- grvty_balancing(od_zones = trip_gen,
                                  friction = flow_tt,
                                  zone_id = "geocode",
                                  zone_o = "income1_p",
                                  zone_d = "income1_a",
                                  friction_o_id = "from_id",
                                  friction_d_id = "to_id",
                                  friction_factor = "friction_income1",
                                  tolerance = 0.001,
                                  max_iter = 100)

flow_income3_est <- grvty_balancing(od_zones = trip_gen,
                                  friction = flow_tt,
                                  zone_id = "geocode",
                                  zone_o = "income3_p",
                                  zone_d = "income3_a",
                                  friction_o_id = "from_id",
                                  friction_d_id = "to_id",
                                  friction_factor = "friction_income3",
                                  tolerance = 0.001,
                                  max_iter = 100)

```

```{r write-init-flows, eval=FALSE}

write_csv(flow_income1_est$flows,
          file = here("P4",
                      "data",
                      "init-income1-flow1.csv"))

write_csv(flow_income3_est$flows,
          file = here("P4",
                      "data",
                      "init-income3-flow1.csv"))
```

## Evaluate model fit

### Average travel time

```{r calc-est-tt-init, message=FALSE}
# Load the income flow data and rename columns before joining
flow_income1 <- here("P4", "data", "init-income1-flow1.csv") |>
  read_csv(col_types = "ccn") |>
  rename(from_id = o_id,
         to_id = d_id,
         income1_flow_est = flow)

flow_income3 <- here("P4", "data", "init-income3-flow1.csv") |>
  read_csv(col_types = "ccn") |>
  rename(from_id = o_id,
         to_id = d_id,
         income3_flow_est = flow)

# Ensure that flow_tt has columns from both flow_income1 and flow_income3
flow_tt <- flow_tt |>
  left_join(flow_income1, by = c("from_id", "to_id")) |>
  left_join(flow_income3, by = c("from_id", "to_id"))

# Drop rows with missing flow estimates to avoid NA issues in the calculation
flow_tt <- flow_tt |>
  drop_na(income1_flow_est, income3_flow_est, travel_time_p50)

# Calculate average travel time, ensuring that no NAs are used in the calculation
avg_tts <- avg_tts |>
  mutate(`Average travel time (estimated)` = c(
    sum(flow_tt$income1_flow_est * flow_tt$travel_time_p50, na.rm = TRUE) / 
      sum(flow_tt$income1_flow_est, na.rm = TRUE),
    sum(flow_tt$income3_flow_est * flow_tt$travel_time_p50, na.rm = TRUE) / 
      sum(flow_tt$income3_flow_est, na.rm = TRUE)
  ))

# Print the table to check the results
avg_tts |>
  kable(digits = 1)
```

### Root Mean Squared Error

```{r calc-rmse-init}

avg_tts <- avg_tts |>
  mutate(rmse = c((mean((flow_tt$flow_income1 - flow_tt$income1_flow_est)^2))^0.5,
                  (mean((flow_tt$flow_income3 - flow_tt$income3_flow_est)^2))^0.5))

kable(avg_tts, digits = 2)
```

### Visual comparison

```{r plot-function}
plot_flows <- function(flow_df,
                       obs_col_name,
                       est_col_name) {
  
  summary <- flow_df |>
    rename(obs = all_of(obs_col_name),
           est = all_of(est_col_name)) |>
    group_by(obs, est) |>
    summarize(n = n()) 
  
  max_scale <- max(summary$obs, summary$est)
  my_interval <- ceiling(max_scale / 10)
  dot_size <- floor(70 / max_scale)
  
  max_n_exp = round(log10(max(summary$n)))
  
  ggplot(summary) +
    geom_point(aes(x = obs,
                   y = est,
                   color = n),
               size = dot_size) +
    scale_x_continuous(name = "Observed flow", 
                       limits = c(0, max_scale),
                       breaks = seq(0, max_scale, by=my_interval)) +
    scale_y_continuous(name = "Estimated flow", 
                       limits = c(0, max_scale),
                       breaks = seq(0, max_scale, by=my_interval)) +
    scale_color_viridis_c(transform = "log",
                          breaks = my_breaks <- c(10^seq(-1, 
                                                         max_n_exp, 
                                                         by=1)),
                          labels = formatC(my_breaks, format = "d", 
                                           big.mark = ","),
                          direction = -1,
                          name = "Number of P-A pairs") +
    theme_minimal()
  
    
}
    
```

income1 sector comparison:

```{r}
# Create the plot and store it in a variable
income1_plot <- plot_flows(flow_tt, 
                            obs_col_name = "flow_income1", 
                            est_col_name = "income1_flow_est")

# Modify the x-axis maximum (e.g., set x max to 100)
income1_plot <- income1_plot + 
  scale_y_continuous(limits = c(NA, 16))  # NA for the lower bound (auto), 100 for the upper bound

# Display the modified plot
print(income1_plot)

```

```{r}
plot_flows(flow_tt,                    
           obs_col_name = "flow_income1", 
           est_col_name = "income1_flow_est")
```

```{r plot-income1-init, message=FALSE}
# Store the plot in a variable
income1_plot <- plot_flows(flow_tt, 
                            obs_col_name = "flow_income1", 
                            est_col_name = "income1_flow_est")

# Save the plot to a PNG file
ggsave("income1_flow_plot.png", plot = income1_plot, width = 8, height = 6, dpi = 300)

```

income3 sector comparison:

```{r}
plot_flows(flow_tt, 
           obs_col_name = "flow_income3", 
           est_col_name = "income3_flow_est")
```

```{r plot-income3-init, message=FALSE}
# Store the plot in a variable
income3_plot <- plot_flows(flow_tt, 
                            obs_col_name = "flow_income3", 
                            est_col_name = "income3_flow_est")

# Save the plot to a PNG file
ggsave("income3_flow_plot.png", plot = income3_plot, width = 8, height = 6, dpi = 300)

```

## Calibrate the gravity model

```{r calibrate, eval=FALSE}
flow_tt <- flow_tt |>
  select(-income1_flow_est,
         -income3_flow_est)

## Calibrate income1 beta
calibrated_flows_income1 <- grvty_calibrate(obs_flow_tt = flow_tt,
                                          o_id_col = "from_id",
                                          d_id_col = "to_id",
                                          obs_flow_col = "flow_income1",
                                          tt_col = "travel_time_p50",
                                          tolerance_balancing = 0.0001,
                                          max_iter_balancing = 30,
                                          tolerance_calibration = 0.2,
                                          max_iter_calibration = 30)

beta_income1 <- calibrated_flows_income1$beta

income1_flow_est <- calibrated_flows_income1$flows |>
  rename(from_id = o_id,
         to_id = d_id,
         income1_flow_est = flow_est) |>
  select(from_id, to_id, income1_flow_est)

flow_tt <- flow_tt |>
  left_join(income1_flow_est)

## Calibrate income3 beta
calibrated_flows_income3 <- grvty_calibrate(obs_flow_tt = flow_tt,
                                          o_id_col = "from_id",
                                          d_id_col = "to_id",
                                          obs_flow_col = "flow_income3",
                                          tt_col = "travel_time_p50",
                                          tolerance_balancing = 0.0001,
                                          max_iter_balancing = 30,
                                          tolerance_calibration = 0.2,
                                          max_iter_calibration = 30)

beta_income3 <- calibrated_flows_income3$beta

income3_flow_est <- calibrated_flows_income3$flows |>
  rename(from_id = o_id,
         to_id = d_id,
         income3_flow_est = flow_est) |>
  select(from_id, to_id, income3_flow_est)

flow_tt <- flow_tt |>
  left_join(income3_flow_est)


betas_table <- tibble(Industry = c("income1", 
                                   "income3"),
                      beta_initial = betas,
                      beta_calibrated = c(beta_income1,
                                          beta_income3))
write_csv(flow_tt,
          here("P4",
               "data",
               "calib-flows.csv"))

write_csv(betas_table,
          here("P4",
               "data",
               "calib-betas.csv"))

```

## Evaluate model fit

### Average travel time

```{r new-avg-tt, message=FALSE}

flow_tt <- here("P4",
                "data",
                "calib-flows.csv") |>
  read_csv()

avg_tts <- avg_tts |>
  select(-rmse) |>
  mutate(`Average travel time (estimated)` = c(
    sum(flow_tt$income1_flow_est * flow_tt$travel_time_p50) / 
      sum(flow_tt$income1_flow_est),
    sum(flow_tt$income3_flow_est * flow_tt$travel_time_p50) / 
      sum(flow_tt$income3_flow_est)))

avg_tts |>
  kable(digits = 1)
```

### Root Mean Squared Error

```{r new-rmse}

avg_tts <- avg_tts |>
  mutate(rmse = c((mean((flow_tt$flow_income1 - flow_tt$income1_flow_est)^2))^0.5,
                  (mean((flow_tt$flow_income3 - flow_tt$income3_flow_est)^2))^0.5))

kable(avg_tts, digits = 2)
```

### Visual comparison

estimated and observed flows for income1-producing workers.

```{r new-plot-income1, message=FALSE}
plot_flows(flow_tt,
           obs_col_name = "flow_income1",
           est_col_name = "income1_flow_est")
```

for income3 workers:

```{r new-plot-income3, message=FALSE}
plot_flows(flow_tt,
           obs_col_name = "flow_income3",
           est_col_name = "income3_flow_est")
```

## Interpret calibrated parameters

```{r plot-final-betas, message=FALSE}


betas_table <- here("P4",
                    "data",
                    "calib-betas.csv") |> 
  read_csv()

friction <- tibble(`Travel time (min)` = seq(1, 60, by=1)) |>
  mutate(income1 = exp(-1 * betas_table$beta_calibrated[1] * `Travel time (min)`),
         income3 = exp(-1 * betas_table$beta_calibrated[2] * `Travel time (min)`),
         Service = exp(-1 * betas_table$beta_calibrated[3] * `Travel time (min)`),
         `All industries` = 
           exp(-1 * betas_table$beta_calibrated[4] * `Travel time (min)`)) |>
  pivot_longer(cols = -`Travel time (min)`,
               names_to = "Sector") |>
  rename(`Destination attractiveness` = value) |>
  filter(`Destination attractiveness` < 2)

ggplot(friction) +
  geom_line(aes(x = `Travel time (min)`,
                y = `Destination attractiveness`,
                linetype = Sector)) +
  scale_x_continuous(breaks = seq(0, 60, by=5)) +
  scale_y_continuous(breaks = seq(0, 2, by=0.1),
                     limits = c(0, 1.5)) +
  theme_minimal()
```
